┌───────────────────────────────────────────────────┐
│                      main()                       │
└───────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Leer la entrada del usuario usando readline()               │
      │ -> Si readline devuelve NULL (EOF), terminar el shell       │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Verificar si la entrada no está vacía (sólo espacios)       │
      │ -> Si la entrada es válida, continuar                       │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Tokenización: Dividir la entrada en tokens                  │
      │ -> Separar por espacios y símbolos especiales (pipes, etc.) │
      │ -> Usar ft_split o implementación propia                    │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Lexer: Clasificar los tokens                                │
      │ -> Determinar si cada token es un comando, argumento,       │
      │    operador o redirección                                   │
      │ -> Manejar comillas simples, dobles y expansión de variables│
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Parseo: Organizar tokens en una estructura de comandos      │
      │ -> Identificar secuencias de comandos, pipes, redirecciones │
      │ -> Crear nodos que representen cada parte (AST u otra)      │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Ejecución de comandos                                       │
      │ -> fork() para crear un proceso hijo                        │
      │ -> En el proceso hijo: execve() para ejecutar el comando    │
      │ -> Si hay pipes o redirecciones, manejarlas antes de execve │
      │ -> En el proceso padre: esperar al hijo con waitpid()       │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Limpieza: Liberar memoria y estructuras                     │
      │ -> Liberar memoria de los tokens, AST, etc.                 │
      │ -> Preparar para la siguiente entrada del usuario           │
      └─────────────────────────────────────────────────────────────┘
                           │
                           ▼
      ┌─────────────────────────────────────────────────────────────┐
      │ Volver a esperar la siguiente entrada del usuario           │
      └─────────────────────────────────────────────────────────────┘



git update-index --assume-unchanged Doxyfile
git update-index --assume-unchanged .github/workflows/doxygen.yml
git update-index --assume-unchanged .github/assets/doxygen-awesome.css

